(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["indb"] = factory();
	else
		root["indb"] = factory();
})(typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "InDB", function() { return InDB; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "InDBStore", function() { return InDBStore; });
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr && (typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]); if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }


var InDB = /*#__PURE__*/function () {
  function InDB() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, InDB);

    var name = options.name,
        _options$version = options.version,
        version = _options$version === void 0 ? 1 : _options$version,
        stores = options.stores;
    var asStorage = !name;

    if (!name) {
      name = '__indb__';
    }

    if (!stores || !Array.isArray(stores) || !stores.length) {
      stores = [{
        name: '__indb__',
        isKv: true
      }];
    }

    this.name = name;
    this.version = version;
    this.stores = stores; // update database structure

    var request = indexedDB.open(name, version);

    request.onupgradeneeded = function (e) {
      var db = e.target.result;
      var existStoreNames = Array.from(db.objectStoreNames);
      var passStoreNames = [];
      stores.forEach(function (item) {
        var objectStore = null;

        if (existStoreNames.indexOf(item.name) > -1) {
          objectStore = e.target.transaction.objectStore(item.name);
        } else {
          var keyPath = item.isKv ? 'key' : item.keyPath;
          var autoIncrement = item.isKv ? false : item.autoIncrement;
          objectStore = db.createObjectStore(item.name, {
            keyPath: keyPath,
            autoIncrement: autoIncrement
          });
        } // delete old indexes


        var indexNames = objectStore.indexNames;

        if (indexNames && indexNames.length) {
          Array.from(indexNames).forEach(function (item) {
            return objectStore.deleteIndex(item);
          });
        } // add new indexes


        if (item.indexes && item.indexes.length) {
          item.indexes.forEach(function (item) {
            objectStore.createIndex(item.name, item.keyPath || item.name, {
              unique: item.unique,
              multiEntry: Array.isArray(item.keyPath)
            });
          });
        }

        passStoreNames.push(item.name);
      }); // delete objectStores which is not in config information

      if (existStoreNames) {
        existStoreNames.forEach(function (item) {
          if (passStoreNames.indexOf(item) === -1) {
            db.deleteObjectStore(item);
          }
        });
      }
    };

    request.onblocked = function (e) {
      console.error(Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__[/* modifyError */ "a"])(new Error('indexedDB ' + name + ' is blocked')));
    };

    this.using = {}; // use as a storage like:
    // const store = new InDB()
    // store.setItem('key', 'value')

    if (asStorage) {
      return this.use(name);
    }
  }

  _createClass(InDB, [{
    key: "connect",
    value: function connect() {
      var _this = this;

      return new Promise(function (resolve, reject) {
        var request = indexedDB.open(_this.name, _this.version);

        request.onerror = function (e) {
          reject(Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__[/* modifyError */ "a"])(e));
        };

        request.onsuccess = function (e) {
          resolve(e.target.result);
        };
      });
    }
  }, {
    key: "use",
    value: function use(name) {
      var currentStore = this.stores.find(function (item) {
        return item.name === name;
      });

      if (!currentStore) {
        throw new Error("[InDB]: store ".concat(name, " is not existing."));
      } // use connected store


      if (this.using[name]) {
        return this.using[name];
      }

      var store = new InDBStore({
        db: this,
        store: currentStore
      }); // if it is a key-value store, append special methods

      if (currentStore.isKv) {
        store.key = function (i) {
          return store.keys().then(function (keys) {
            return keys && keys[i];
          });
        };

        store.getItem = function (key) {
          return store.get(key).then(function (obj) {
            return obj && obj.value;
          });
        };

        store.setItem = function (key, value) {
          return store.put({
            key: key,
            value: value
          });
        };

        store.removeItem = function (key) {
          return store["delete"](key);
        };
      }

      this.using[name] = store;
      return store;
    }
  }, {
    key: "close",
    value: function close() {
      this.using = null;
      this.stores = null;
      return this.connect().then(function (db) {
        db.close();
      });
    }
  }]);

  return InDB;
}();

InDB.deleteDatabase = function (name) {
  return new Promise(function (resolve, reject) {
    var request = indexedDB.deleteDatabase(name);

    request.onsuccess = function () {
      resolve();
    };

    request.onerror = function (e) {
      reject(e);
    };
  });
};

InDB.databases = function () {
  return indexedDB.databases();
};

/* harmony default export */ __webpack_exports__["default"] = (InDB);
var InDBStore = /*#__PURE__*/function () {
  function InDBStore() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, InDBStore);

    var store = options.store,
        db = options.db;

    if (_typeof(store) !== 'object' || !store.name || typeof store.name !== 'string') {
      throw new Error("[InDBStore]: options.store should be a store config object.");
    }

    if (!(db instanceof InDB)) {
      throw new Error("[InDBStore]: options.db should be an instanceof InDB.");
    }

    this.store = store;
    this.db = db;
    this.name = store.name;
    this.keyPath = store.isKv ? 'key' : store.keyPath;
    this._queue = [];
  }

  _createClass(InDBStore, [{
    key: "transaction",
    value: function transaction() {
      var _this2 = this;

      var writable = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

      var create = function create() {
        var name = _this2.name;
        var mode = writable ? 'readwrite' : 'readonly'; // share the same connection

        var connection = _this2.db.connection;
        var deferer = connection ? Promise.resolve(connection) : _this2.db.connect();
        return deferer.then(function (db) {
          _this2.db.connection = db;
          var tx = db.transaction(name, mode);

          var disconnect = function disconnect() {
            _this2.db.connection = null;

            _this2._queue.shift();
          };

          tx.oncomplete = disconnect;
          tx.onabort = disconnect;
          tx.onerror = disconnect;
          return tx;
        });
      };

      var latest = this._queue[this._queue.length - 1];
      var deferer = latest ? latest.then(function () {
        return create();
      }) : create();

      this._queue.push(deferer);

      return deferer;
    }
  }, {
    key: "objectStore",
    value: function objectStore() {
      var writable = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      var name = this.name;
      return this.transaction(writable).then(function (tx) {
        return tx.objectStore(name);
      });
    }
  }, {
    key: "cursor",
    value: function cursor(options) {
      var index = options.index,
          range = options.range,
          direction = options.direction,
          onTouch = options.onTouch,
          onDone = options.onDone,
          onError = options.onError,
          _options$writable = options.writable,
          writable = _options$writable === void 0 ? false : _options$writable;
      return this.objectStore(writable).then(function (objectStore) {
        var owner = index ? objectStore.index(index) : objectStore;
        var request = owner.openCursor(range, direction);

        request.onsuccess = function (e) {
          var cursor = e.target.result;

          if (cursor) {
            onTouch(cursor, owner);
          } else {
            onDone(cursor, owner);
          }
        };

        request.onerror = function (e) {
          onError(Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__[/* modifyError */ "a"])(e));
        };
      });
    }
  }, {
    key: "request",
    value: function request(fn) {
      var _this3 = this;

      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var _options$writable2 = options.writable,
          writable = _options$writable2 === void 0 ? false : _options$writable2;
      return new Promise(function (resolve, reject) {
        _this3.objectStore(writable).then(function (objectStore) {
          var request = fn(objectStore);

          request.onsuccess = function (e) {
            var result = e.target.result;
            resolve(result);
          };

          request.onerror = function (e) {
            reject(Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__[/* modifyError */ "a"])(e));
          };
        });
      });
    }
  }, {
    key: "iterate",
    value: function iterate(fn) {
      var _this4 = this;

      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var index = options.index,
          range = options.range,
          _options$writable3 = options.writable,
          writable = _options$writable3 === void 0 ? false : _options$writable3,
          _options$direction = options.direction,
          direction = _options$direction === void 0 ? 'next' : _options$direction;
      return new Promise(function (resolve, reject) {
        _this4.cursor({
          index: index,
          range: range,
          writable: writable,
          direction: direction,
          onTouch: function onTouch(cursor, owner) {
            var next = function next() {
              return cursor["continue"]();
            };

            var stop = function stop() {
              // should commit when writable is true
              owner.transaction.commit();
              resolve();
            };

            fn(cursor, next, stop);
          },
          onDone: function onDone() {
            resolve();
          },
          onError: function onError(e) {
            reject(e);
          }
        });
      });
    }
  }, {
    key: "batch",
    value: function batch(fns) {
      var _this5 = this;

      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var _options$writable4 = options.writable,
          writable = _options$writable4 === void 0 ? true : _options$writable4;
      return this.transaction(writable).then(function (tx) {
        var name = _this5.name;
        var promises = [];
        var objectStore = tx.objectStore(name);
        fns.forEach(function (fn) {
          var deferer = new Promise(function (resolve, reject) {
            var request = fn(objectStore);

            request.onsuccess = function (e) {
              var result = e.target.result;
              resolve(result);
            };

            request.onerror = function (e) {
              reject(Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__[/* modifyError */ "a"])(e));
            };
          });
          promises.push(deferer);
        });
        return Promise.all(promises);
      });
    } // ==========================================

  }, {
    key: "get",
    value: function get(key) {
      // single key
      if (!Array.isArray(key)) {
        return this.request(function (objectStore) {
          return objectStore.get(key);
        });
      } // multiple keys


      var keys = key;
      var fns = keys.map(function (key) {
        return function (objectStore) {
          return objectStore.get(key);
        };
      });
      return this.batch(fns, {
        writable: false
      });
    }
  }, {
    key: "keys",
    value: function keys() {
      var keyPah = this.keyPath;
      var results = [];
      return this.each(function (obj) {
        var key = Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__[/* parse */ "b"])(obj, keyPah);
        results.push(key);
      }).then(function () {
        return results;
      });
    }
  }, {
    key: "all",
    value: function all() {
      var results = [];
      return this.each(function (obj) {
        results.push(obj);
      }).then(function () {
        return results;
      });
    }
  }, {
    key: "count",
    value: function count() {
      return this.request(function (objectStore) {
        return objectStore.count();
      });
    } // ==========================================

  }, {
    key: "each",
    value: function each(fn) {
      return this.iterate(function (cursor, next) {
        var obj = cursor.value;
        fn(obj);
        next();
      });
    }
  }, {
    key: "reverse",
    value: function reverse(fn) {
      return this.iterate(function (cursor, next) {
        var obj = cursor.value;
        fn(obj);
        next();
      }, {
        direction: 'prev'
      });
    }
  }, {
    key: "some",
    value: function some() {
      var _this6 = this;

      var count = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 10;
      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      return new Promise(function (resolve, reject) {
        var results = [];
        var i = 0;
        var start = offset;
        var end = offset + count;
        var direction; // offset < 0, means begining from the latest item,
        // for example, offset = -1, means begining from the last item

        if (offset < 0) {
          direction = 'prev';
          count = Math.min(count, -offset);
          start = -(offset + count) || 0;
          end = start + count;
        }

        _this6.iterate(function (cursor, next, stop) {
          if (i < start) {
            i++;
            next();
          } else if (i < end) {
            results.push(cursor.value);
            i++;
            next();
          } else {
            stop();
          }
        }, {
          direction: direction
        }).then(function () {
          if (offset < 0) {
            results.reverse();
          }

          resolve(results);
        })["catch"](reject);
      });
    }
  }, {
    key: "first",
    value: function first() {
      return this.some(1).then(function (items) {
        return items[0];
      });
    }
  }, {
    key: "last",
    value: function last() {
      return this.some(1, -1).then(function (items) {
        return items[0];
      });
    } // =========================

  }, {
    key: "find",
    value: function find(key, value) {
      return this.request(function (objectStore) {
        return objectStore.index(key).get(value);
      });
    }
  }, {
    key: "query",
    value: function query(key, value, compare) {
      var _this7 = this;

      var range = function () {
        switch (compare) {
          case '>':
            return IDBKeyRange.lowerBound(value, true);

          case '>=':
            return IDBKeyRange.lowerBound(value);

          case '<':
            return IDBKeyRange.upperBound(value, true);

          case '<=':
            return IDBKeyRange.upperBound(value);

          case '%':
          case '!=':
          case 'in':
            return undefined;

          default:
            return IDBKeyRange.only(value);
        }
      }();

      var results = [];
      return new Promise(function (resolve, reject) {
        _this7.cursor({
          index: key,
          range: range,
          onTouch: function onTouch(cursor, owner) {
            var targetObj = cursor.value;
            var keyPath = owner.keyPath;
            var targetValue = Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__[/* parse */ "b"])(targetObj, keyPath);

            if (compare === '!=') {
              if (targetValue !== value) {
                results.push(targetObj);
              }
            } else if (compare === '%') {
              if (typeof targetValue == 'string' && targetValue.indexOf(value) > -1) {
                results.push(targetObj);
              }
            } else if (compare === 'in') {
              if (Array.isArray(value) && value.indexOf(targetValue) > -1) {
                results.push(targetObj);
              }
            } else {
              results.push(targetObj);
            }

            cursor["continue"]();
          },
          onDone: function onDone() {
            resolve(results);
          },
          onError: function onError(e) {
            reject(e);
          }
        });
      });
    }
  }, {
    key: "select",
    value: function select() {
      var currentStore = this.store;
      var indexes = currentStore.indexes || [];
      var indexesMapping = {};
      indexes.forEach(function (item) {
        var name = item.name,
            keyPath = item.keyPath;
        indexesMapping[name] = keyPath;
      });

      var compareAandB = function compareAandB(a, b, compare) {
        if (a === undefined) {
          return false;
        }

        switch (compare) {
          case '>':
            return a > b;

          case '>=':
            return a >= b;

          case '<':
            return a < b;

          case '<=':
            return a <= b;

          case '!=':
            return a !== b;

          case '%':
            return typeof a === 'string' && a.indexOf(b) > -1;

          case 'in':
            return Array.isArray(b) && b.indexOf(a) > -1;

          default:
            return a === b;
        }
      };

      var determine = function determine(obj, and_conditions, or_conditions) {
        if (!and_conditions.length && !or_conditions.length) {
          return false;
        }

        for (var i = 0, len = and_conditions.length; i < len; i++) {
          var _and_conditions$i = and_conditions[i],
              keyPath = _and_conditions$i.keyPath,
              value = _and_conditions$i.value,
              compare = _and_conditions$i.compare;
          var current = Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__[/* parse */ "b"])(obj, keyPath);

          if (!compareAandB(current, value, compare)) {
            return false;
          }
        }

        if (!or_conditions.length) {
          return true;
        }

        for (var _i = 0, _len2 = or_conditions.length; _i < _len2; _i++) {
          var _or_conditions$_i = or_conditions[_i],
              _keyPath = _or_conditions$_i.keyPath,
              _value = _or_conditions$_i.value,
              _compare = _or_conditions$_i.compare;

          var _current = Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__[/* parse */ "b"])(obj, _keyPath);

          if (compareAandB(_current, _value, _compare)) {
            return true;
          }
        }

        return false;
      };

      var groups = [];

      for (var _len = arguments.length, rules = new Array(_len), _key = 0; _key < _len; _key++) {
        rules[_key] = arguments[_key];
      }

      rules.forEach(function (conditions) {
        var or_conditions = [];
        var and_conditions = [];

        for (var i = 0, len = conditions.length; i < len; i++) {
          var _conditions$i = conditions[i],
              key = _conditions$i.key,
              value = _conditions$i.value,
              compare = _conditions$i.compare,
              optional = _conditions$i.optional;
          var keyPath = indexesMapping[key] || key; // if there is not such index, use original key as keyPath

          if (optional) {
            or_conditions.push({
              keyPath: keyPath,
              value: value,
              compare: compare
            });
          } else {
            and_conditions.push({
              keyPath: keyPath,
              value: value,
              compare: compare
            });
          }
        }

        groups.push([and_conditions, or_conditions]);
      });

      var isOk = function isOk(obj) {
        for (var i = 0, len = groups.length; i < len; i++) {
          var _groups$i = _slicedToArray(groups[i], 2),
              and_conditions = _groups$i[0],
              or_conditions = _groups$i[1];

          var res = determine(obj, and_conditions, or_conditions);

          if (res) {
            return true;
          }
        }

        return false;
      };

      var results = [];
      return this.each(function (obj) {
        if (isOk(obj)) {
          results.push(obj);
        }
      }).then(function () {
        return results;
      });
    } // =====================================

  }, {
    key: "add",
    value: function add(obj, key) {
      if (Array.isArray(obj)) {
        var objs = obj;

        if (objs.length < 2) {
          return this.add(obj[0], key);
        }

        var fns = objs.map(function (obj) {
          return function (objectStore) {
            return objectStore.add(obj, key);
          };
        });
        return this.batch(fns);
      }

      if (!obj) {
        return Promise.resolve();
      }

      return this.request(function (objectStore) {
        return objectStore.add(obj, key);
      }, {
        writable: true
      });
    }
  }, {
    key: "put",
    value: function put(obj, key) {
      if (Array.isArray(obj)) {
        var objs = obj;

        if (objs.length < 2) {
          return this.put(objs[0], key);
        }

        var fns = objs.map(function (obj) {
          return function (objectStore) {
            return objectStore.put(obj, key);
          };
        });
        return this.batch(fns);
      }

      if (!obj) {
        return Promise.resolve();
      }

      return this.request(function (objectStore) {
        return objectStore.put(obj, key);
      }, {
        writable: true
      });
    }
  }, {
    key: "delete",
    value: function _delete(key) {
      if (Array.isArray(key)) {
        var keys = key;

        if (keys.length < 2) {
          return this["delete"](keys[0]);
        }

        var fns = keys.map(function (key) {
          return function (objectStore) {
            return objectStore["delete"](key);
          };
        });
        return this.batch(fns);
      }

      if (!key) {
        return Promise.resolve();
      }

      return this.request(function (objectStore) {
        return objectStore["delete"](key);
      }, {
        writable: true
      });
    }
  }, {
    key: "remove",
    value: function remove(obj) {
      var keyPah = this.keyPath;

      if (Array.isArray(obj)) {
        var objs = obj;

        if (objs.length < 2) {
          return this.remove(objs[0]);
        }

        var fns = objs.map(function (obj) {
          var key = Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__[/* parse */ "b"])(obj, keyPah);
          return function (objectStore) {
            return objectStore["delete"](key);
          };
        });
        return this.batch(fns);
      }

      if (!obj) {
        return Promise.resolve();
      }

      var key = Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__[/* parse */ "b"])(obj, keyPah);

      if (!key) {
        return Promise.resolve();
      }

      return this["delete"](key);
    }
  }, {
    key: "clear",
    value: function clear() {
      return this.request(function (objectStore) {
        return objectStore.clear();
      }, {
        writable: true
      });
    }
  }]);

  return InDBStore;
}();

/***/ }),
/* 1 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export makeKeyChain */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return parse; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return modifyError; });
function makeKeyChain(path) {
  var chain = path.toString().split(/\.|\[|\]/).filter(function (item) {
    return !!item;
  });
  return chain;
}
function parse(obj, path) {
  if (Array.isArray(path)) {
    for (var i = 0, len = path.length; i < len; i++) {
      var item = path[i];
      var res = parse(obj, item);

      if (res !== undefined) {
        return res;
      }
    }

    return;
  }

  var chain = makeKeyChain(path);

  if (!chain.length) {
    return obj;
  }

  var target = obj;

  for (var _i = 0, _len = chain.length; _i < _len; _i++) {
    var key = chain[_i];

    if (target[key] === undefined) {
      return;
    }

    target = target[key];
  }

  return target;
}
function modifyError(e) {
  var message = e.message;
  e.message = message.indexOf('[IndexedDB]') === -1 ? '[IndexedDB]: ' + message : message;
  return e;
}

/***/ })
/******/ ]);
});
//# sourceMappingURL=indb.js.map